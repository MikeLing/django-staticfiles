==================
django-staticfiles
==================

This is a Django app that provides helpers for serving static files.

The main website for django-staticfiles is
`bitbucket.org/jezdez/django-staticfiles`_ where you can also file tickets.

You can also install the `in-development version`_ of django-staticfiles with
``pip install django-staticfiles==dev`` or ``easy_install django-staticfiles==dev``.

.. _bitbucket.org/jezdez/django-staticfiles: http://bitbucket.org/jezdez/django-staticfiles/
.. _in-development version: http://bitbucket.org/jezdez/django-staticfiles/get/tip.gz#egg=django-staticfiles-dev

Helpers
=======

build_static management command
-------------------------------

The build_static script collects the media files from all installed apps and
copies them to the ``STATICFILES_STORAGE``::

    $ python manage.py build_static

Alternatively, you can limit the apps a list of apps to the command::

    $ python manage.py build_static admin polls

In case you have two apps with the same file name and relative path you should
use the ``--interactive`` option of ``build_static`` which will prompt you to 
choose which one to use. This is useful if you want to overwrite default media
files with your custom app, for example. Remember to remove the 
``STATIC_ROOT`` folder before you use this option or the script will prompt 
you for each file.

Please also refer to the help of the build_static management command by
running::

    $ python manage.py build_static --help

resolve_static management command
--------------------------------

To quickly resolve the full file path of a media file on the filesystem,
you can pass its expected URL path(s) to the ``resolve_static`` management
command, e.g.::

    $ python manage.py resolve_static css/base.css
    Resolving css/polls.css:
        /home/polls.com/polls/media/css/polls.css

If multiple locations are found that match the given path
it will list all of them, sorted by its importance.

static_url context processor
----------------------------

To refer to static file assets from a template:

- set the ``STATIC_URL`` setting (see below) to the URL path where your
  webserver serves the files located in ``STATIC_ROOT``.

- Add ``staticfiles.context_processors.static_url`` to your
  ``TEMPLATE_CONTEXT_PROCESSORS`` setting.

- Templates rendered with ``RequestContext`` will now have access to a
  ``STATIC_URL`` context variable.

Serving static files during development
=========================================

.. note:: Don't use this on production servers.
   This feature is **only intended for development**.
   Please, don't shoot yourself in the foot. Thanks.

``staticfiles`` provides the static file serving view
``staticfiles.views.serve`` to handle the app media, media files defined
with the ``STATICFILES_DIRS`` setting and other media files found in the
``MEDIA_ROOT`` directory. Make sure your projects' urls.py contains the
following snippet below the rest of the url configuration::

    from django.conf import settings
    if settings.DEBUG:
        urlpatterns += patterns('', 
            (r'^site_media/', include('staticfiles.urls')),
        )

Setting
=======

STATIC_ROOT
-----------

:Default: ``''`` (Empty string)

The absolute path to the directory that holds static files like app media::

    STATIC_ROOT = "/home/polls.com/polls/site_media/static/"

This is only used by the default static files storage (i.e. if you use a
different ``STATICFILES_STORAGE``, you don't need to set this).

STATIC_URL
----------

:Default: ``''`` (Empty string)

URL that handles the files served from STATIC_ROOT, e.g.::

    STATIC_URL = '/site_media/static/'

Note that this should have a trailing slash if it has a path component.

Good: "http://www.example.com/static/" Bad: "http://www.example.com/static"

STATICFILES_DIRS
-----------------------

:Default: ``[]``

This setting defines the additional locations the ``staticfiles`` app will
traverse when looking for media files, e.g. if you use the ``build_static``
or ``resolve_static`` management command or use the static file serving view.

It should be defined as a sequence of ``(prefix, path)`` tuples, e.g.::

    STATICFILES_DIRS = (
        ('special_polls', '/home/special.polls.com/polls/media'),
        ('polls', '/home/polls.com/polls/media'),
        ('', '/home/polls.com/core/media/'),
    )

STATICFILES_PREPEND_LABEL_APPS
-------------------------------

:Default: ``('django.contrib.admin',)``

A sequence of app paths that should be prefixed with the label name.
For example, ``django.contrib.admin`` media files should be served from
``admin/[js,css,images]`` rather than the media files getting served directly
from the static root.

STATICFILES_MEDIA_DIRNAMES
---------------------------

:Default: ``('media',)``

A sequence of directory names to be used when searching for media files in
installed apps, e.g. if an app has its media files in ``<app>/static``
use::

    STATICFILES_MEDIA_DIRNAMES = (
        'media',
        'static',
    )

STATICFILES_EXCLUDED_APPS
-------------------------

:Default: ``[]``

A sequence of app paths that should be ignored when searching for media
files::

    STATICFILES_EXCLUDED_APPS = (
        'annoying.app',
        'old.company.app',
    )

STATICFILES_STORAGE
-------------------

:Default: ``'staticfiles.storage.StaticFileStorage'``

The storage to use for copying static files to a single location. 


Changelog:
==========

development
-----------

* Renamed build_media and resolve_media management commands to *_static as to
  avoid confusions between Django's use of the term "media" (for uploads) and
  "static" files.

* Rework most of the internal logic, abstracting the core functionality away
  from the management commands.

v0.1.2 (2009-09-02):
--------------------

* Fixed a typo in settings.py

* Fixed a conflict in build_media (now build_static) between handling
  non-namespaced app media and other files with the same relative path.

v0.1.1 (2009-09-02):
--------------------

* Added README with a bit of documentation :)

v0.1.0 (2009-09-02):
--------------------

* Initial checkin from Pinax' source.

* Will create the STATIC_ROOT directory if not existent.
